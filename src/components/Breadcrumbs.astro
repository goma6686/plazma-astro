---
import "@styles/breadcrumbs.css";
interface Props {
  containerStyle?: string;
}

const { props } = Astro;
// Get clean URL path
const currentUrlPath = Astro.url.pathname.replace(/\/+$/, "");
// Split path into segments
const pathSegments = currentUrlPath.split("/").slice(1);
// Process breadcrumb segments
const breadcrumbList = [...pathSegments];

// Format special paths
if (breadcrumbList[0] === "posts") {
  const pageNum = breadcrumbList[1] || 1;
  breadcrumbList.splice(0, 2, `Posts (page ${pageNum})`);
} else if (breadcrumbList[0] === "tags" && !isNaN(Number(breadcrumbList[2]))) {
  const tag = breadcrumbList[1];
  const pageNum = Number(breadcrumbList[2]);
  const pageText = pageNum === 1 ? "" : `(page ${pageNum})`;
  breadcrumbList.splice(1, 3, `${tag} ${pageText}`.trim());
}
---

<nav class={props.containerStyle ?? "breadcrumb"} aria-label="breadcrumb">
  <ul>
    <li>
      <a href="/">Home</a>
      <span aria-hidden="true">&raquo;</span>
    </li>
    {
      breadcrumbList.map((breadcrumb, index) => {
        const isLast = index + 1 === breadcrumbList.length;
        return isLast ? (
          <li>
            <span
              class={index > 0 ? "lowercase" : "capitalize"}
              aria-current="page"
            >
              {decodeURIComponent(breadcrumb)}
            </span>
          </li>
        ) : (
          <li>
            <a href={`/${breadcrumb}/`}>{breadcrumb}</a>
            <span aria-hidden="true">&raquo;</span>
          </li>
        );
      })
    }
  </ul>
</nav>
