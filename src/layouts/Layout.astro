---
import { LOCALE, SITE } from "@config";
import "@styles/base.css";
import "@styles/collections.css";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  description?: string;
  body?: string;
  pubDatetime?: Date;
  eventDatetime?: Date;
  scrollSmooth?: boolean;
  children?: React.ReactNode;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
  body,
  pubDatetime,
  eventDatetime,
  scrollSmooth = false,
} = Astro.props;
---

<!doctype html>
<html
  lang=`${LOCALE.lang ?? "en"}`
  class={`${scrollSmooth && "scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <!-- Include: AddEvent theme css -->
    <link
      rel="stylesheet"
      href="https://cdn.addevent.com/libs/atc/themes/000-theme-3/theme.css"
      type="text/css"
      media="all"
    />
    <!-- AddEvent script -->
    <script
      type="text/javascript"
      src="https://cdn.addevent.com/libs/atc/1.6.1/atc.min.js"
      async
      defer></script>

    <!-- AddEvent Settings -->
    <script type="text/javascript">
      window.addeventasync = function () {
        addeventatc.settings({
          appleical: { show: true, text: "Apple Calendar" },
          google: { show: true, text: "Google <em>(online)</em>" },
          office365: { show: true, text: "Office 365 <em>(online)</em>" },
          outlook: { show: false },
          outlookcom: { show: true, text: "Outlook.com <em>(online)</em>" },
          yahoo: { show: false },
        });
      };
    </script>
    <link rel="canonical" href={new URL(Astro.url, Astro.site).pathname} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="body" content={body} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {eventDatetime && <meta content={eventDatetime.toISOString()} />}
    <!-- Google Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,400;0,500;0,600;0,700;1,400;1,600&display=swap"
      rel="stylesheet"
    />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }
  </head>
  <body>
    <slot />
  </body>

  <script
    src="https://cdn.jsdelivr.net/npm/add-to-calendar-button@2.4.1/dist/atcb.min.js"
    defer></script>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", function () {
      function setupCalendarButtons() {
        if (typeof atcb_action !== "function") {
          setTimeout(setupCalendarButtons, 100);
          return;
        }

        const calendarButtons = document.querySelectorAll('[id^="atc-btn-"]');

        calendarButtons.forEach(button => {
          const title = button.getAttribute("data-title") || "Event";
          const description = button.getAttribute("data-description") || "";
          const location = button.getAttribute("data-location") || "";
          const startDateStr = button.getAttribute("data-start-date");
          const endDateStr = button.getAttribute("data-end-date");

          if (!startDateStr) return;

          const startDate = new Date(startDateStr);
          const endDate = new Date(endDateStr);

          const formatDate = date => {
            return date.toISOString().split("T")[0];
          };

          const formatTime = date => {
            return date.toLocaleTimeString("lt-LT", {
              hour: "2-digit",
              minute: "2-digit",
              hour12: false,
              timeZone: "Europe/Vilnius",
            });
          };

          button.addEventListener("click", function (e) {
            e.preventDefault();
            e.stopPropagation();

            atcb_action(
              {
                name: title,
                description: description,
                location: location,
                startDate: formatDate(startDate),
                startTime: formatTime(startDate),
                endDate: formatDate(endDate),
                endTime: formatTime(endDate),
                options: ["Apple", "Google"],
                timeZone: "Europe/Vilnius",
              },
              button
            );
          });
        });
      }

      setupCalendarButtons();
    });
  </script>
</html>
