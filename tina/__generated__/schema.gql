# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  event(relativePath: String): Event!
  eventConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: EventFilter): EventConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  albums(relativePath: String): Albums!
  albumsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AlbumsFilter): AlbumsConnection!
}

input DocumentFilter {
  event: EventFilter
  post: PostFilter
  albums: AlbumsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Event | Post | Albums | Folder

type Event implements Node & Document {
  title: String!
  eventImage: String
  eventImageUrl: String
  description: String!
  body: JSON!
  eventDatetime: String!
  eventEndDatetime: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input EventFilter {
  title: StringFilter
  eventImage: ImageFilter
  eventImageUrl: StringFilter
  description: StringFilter
  body: RichTextFilter
  eventDatetime: DatetimeFilter
  eventEndDatetime: DatetimeFilter
}

type EventConnectionEdges {
  cursor: String!
  node: Event
}

type EventConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [EventConnectionEdges]
}

type Post implements Node & Document {
  title: String!
  description: String!
  video: String
  postImage: String
  body: JSON!
  tags: [String!]!
  pubDatetime: String
  featured: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PostBodyImageImageFilter {
  src: ImageFilter
  alt: StringFilter
  caption: StringFilter
  size: BooleanFilter
}

input PostBodyImageFilter {
  image: PostBodyImageImageFilter
}

input PostBodyFilter {
  Image: PostBodyImageFilter
}

input PostFilter {
  title: StringFilter
  description: StringFilter
  video: StringFilter
  postImage: ImageFilter
  body: PostBodyFilter
  tags: StringFilter
  pubDatetime: DatetimeFilter
  featured: BooleanFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type AlbumsImages {
  image: String!
  alt: String
}

type Albums implements Node & Document {
  title: String!
  description: String
  cover: String
  images: [AlbumsImages!]!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AlbumsImagesFilter {
  image: ImageFilter
  alt: StringFilter
}

input AlbumsFilter {
  title: StringFilter
  description: StringFilter
  cover: ImageFilter
  images: AlbumsImagesFilter
}

type AlbumsConnectionEdges {
  cursor: String!
  node: Albums
}

type AlbumsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AlbumsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateEvent(relativePath: String!, params: EventMutation!): Event!
  createEvent(relativePath: String!, params: EventMutation!): Event!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAlbums(relativePath: String!, params: AlbumsMutation!): Albums!
  createAlbums(relativePath: String!, params: AlbumsMutation!): Albums!
}

input DocumentUpdateMutation {
  event: EventMutation
  post: PostMutation
  albums: AlbumsMutation
  relativePath: String
}

input DocumentMutation {
  event: EventMutation
  post: PostMutation
  albums: AlbumsMutation
}

input EventMutation {
  title: String
  eventImage: String
  eventImageUrl: String
  description: String
  body: JSON
  eventDatetime: String
  eventEndDatetime: String
}

input PostMutation {
  title: String
  description: String
  video: String
  postImage: String
  body: JSON
  tags: [String]
  pubDatetime: String
  featured: Boolean
}

input AlbumsImagesMutation {
  image: String
  alt: String
}

input AlbumsMutation {
  title: String
  description: String
  cover: String
  images: [AlbumsImagesMutation]
}

schema {
  query: Query
  mutation: Mutation
}
